@page "/listings"
@rendermode InteractiveServer

@inject ItemsClient ItemsClient
@inject UsersClient UsersClient
@inject NavigationManager NavigationManager
@inject ImagesClient ImagesClient

<PageTitle>My listings</PageTitle>



<section class="main-content">
    <h2>My listings</h2>
    @if (_items is null)
    {
        <p>Loading...</p>
    }
    else
    {
        if (_items.Length == 0)
        {
            <p>No items...</p>
        }
        else
        {   
            <div class="item-container grid">
                @foreach (var item in _items)
                {
                    <article class="card">
                        <div class="card-header">
                            <img src=@item.ImageUrls![0] alt=@item.Name />
                        </div>
                        <div class="card-body flex">
                            <h3 class="card-title">
                                @item.Name
                            </h3>
                            <p class="price">@item.Price.ToString("N0") FCFA</p>
                            <div class="item-category">
                                <span>@item.Category</span>
                            </div>
                            <div class="card-actions">
                                <a href="/items/@item.Id" class="info">
                                    <i class="fa-solid fa-circle-info icon--primary"></i>
                                    <span>Details</span>
                                </a>
                                <a href="/edit/@item.Id" class="edit">
                                    <i class="fa-solid fa-pencil icon--warning"></i>
                                    <span>Edit</span>
                                </a>
                                <button role="button" class="delete" @onclick="() => ShowModal(item.Id)">
                                    <i class="fa-solid fa-trash icon--error"></i><span>Delete</span>
                                </button>
                            </div>
                        </div>
                    </article>

                }
            </div>
            <DeleteItem @ref="_deleteItemModal" ConfirmationResult="OnConfirmationResultAsync"/>

        }
    }
</section>

@code {
    @* [Parameter]
    public int Id { get; set; } *@

    private ItemSummary[]? _items;
    @* private List<User>? _users; *@
    @* private User? _user; *@

    private DeleteItem? _deleteItemModal;
    private int _currentItemId;

    protected async override Task OnInitializedAsync()
    {
        _items = await ItemsClient.GetItemsAsync();
        Array.Sort(_items, new ItemIdComparer());
        foreach (var item in _items)
        {
            item.ImageUrls = await ImagesClient.GetItemImagesAsync(item.Id);
        }
    }

    

    private void ShowModal(int id)
    {
        _currentItemId = id;
        _deleteItemModal?.Show(id);
    }

    private async void OnConfirmationResultAsync(bool confirmed)
    {
        if (confirmed)
        {
            // Handle the delete action
            await ItemsClient.DeletItemAsync(_currentItemId);
            NavigationManager.Refresh(forceReload: true);
        }
        else
        {
            // Handle the cancel action
            _deleteItemModal?.Hide();
        }
    }
}  
