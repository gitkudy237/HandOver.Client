@page "/additem"
@page "/additem/{userContact}"
@page "/edit/{id:int}"

@inject UsersClient UsersClient
@inject ItemsConditionsClient ItemsConditionsClient
@inject CategoriesClient CategoriesClient
@inject ItemsClient ItemsClient
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>@_heading</PageTitle>

<div class="main-content">
    <div class="main-content-header">
        <h2>@_heading</h2>
    </div>
    @if (_categories is null 
        || _conditions is null
        || _item is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <EditForm class="form" Model="@_item" FormName="addItem" OnValidSubmit="HandleSubmitAsync">
            <DataAnnotationsValidator />
            <h3>@_title</h3>
            
            
            <div>
                <label for="location">Name:*</label>
                <InputText class="input" type="text" id="location" placeholder="Enter item name..."
                    @bind-Value="_item.Name" />
                <ValidationMessage For="() => _item.Name" />
            </div>
            
            <div>
                <label for="location">Location:*</label>
                <InputText class="input" type="text" id="location" placeholder="Enter location..."
                    @bind-Value="_item.Location" />
                <ValidationMessage For="() => _item.Location" />
            </div>
            <div>
                <label for="category">Category:*</label>
                <InputSelect type="text" id="category" @bind-Value="_item.CategoryId">
                    <option value="">Select category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _item.CategoryId" />
            </div>
            <div>
                <label for="duration">Duration of use (years):*</label>
                <InputNumber class="input" id="duration" @bind-Value="_item.DurationOfUseInYears" />
                <ValidationMessage For="() => _item.DurationOfUseInYears" />
            </div>
            <div style="margin-bottom: 15px;">
                <label for="">Item condition:*</label>
                <div class="radio-container">
                    <InputRadioGroup @bind-Value=_item.ItemConditionId>
                        @foreach (var condition in _conditions)
                        {
                            <InputRadio Value="@condition.Id" id="@condition.Id" />
                            <label for="@condition.Id">@condition.Condition</label>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="() => _item.ItemConditionId" />
                </div>
            </div>
            <div>
                <label for="price">Price:*</label>
                <InputNumber class="input" id="price" @bind-Value="_item.Price" />
                <ValidationMessage For="() => _item.Price" />
            </div>
            <div>
                <InputCheckbox id="delivery" @bind-Value="_item.CanBeDelivered"/>
                <label for="delivery">Can be delivered</label>
            </div>
            <div>
                <label for="">Upload images:</label>
                <InputFile OnChange="OnChange" multiple accept="image/jpeg, image/png, image/gif" id="inputFile"
                    @bind-Value="@_item.Images" />
                
            </div>
            <div>
                <p style="color:red;">@_error</p>
                <label for="">Proof of sale:</label>
                <InputFile OnChange="OnChangeSingle" multiple accept="image/jpeg, image/png, image/gif" id="proof"
                           @bind-Value="@_item.ProofOfSale" />

            </div>
            <div>
                <label for="description">Description:</label>
                <InputTextArea class="input" id="description" @bind-Value="_item.Description" />
            </div>

            <input class="btn btn--block btn--primary" type="submit" 
                value="@_actionText" disabled="@_disabled"/>
        </EditForm>
    }
</div>



@code {
    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    public string? UserContact {get; set;}

    [SupplyParameterFromForm]
    private CreateItem? _item { get; set; }

    private ItemDetails? _itemInDb;
    private Category[]? _categories;
    private ItemCondition[]? _conditions;
    private List<ImageFile> _filesBase64 = new List<ImageFile>();
    private ImageFile? _proofOfSale;
    private string _title = "Add New Item";
    private string _heading = "Add new";
    private string _actionText = "Submit";
    private string _error = string.Empty;
    private bool _disabled;
    private LoadSpinner? _spinner;

    protected async override Task OnParametersSetAsync()
    {
        if (_item is not null)
        {
            return;
        }

        if (Id is not null)
        {
            _itemInDb = await ItemsClient.GetItemAsync(Id.Value);
            ArgumentNullException.ThrowIfNull(_itemInDb);

            _item = new();

            _item.Name = _itemInDb.Name;
            _item.CategoryId = _itemInDb.CategoryId;
            _item.ItemConditionId = _itemInDb.ItemConditionId;
            _item.Location = _itemInDb.Location;
            _item.Description = _itemInDb.Description;
            _item.Price = _itemInDb.Price;

            _title = $"Edit {_item.Name}";
            _actionText = "Confirm";
        }

        else
        {
            _item = new();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        _categories = await CategoriesClient.GetCategoriesAsync();
        _conditions = await ItemsConditionsClient.GetItemsConditionsAsync();
    }

    public async Task HandleSubmitAsync()
    {
        _disabled = true;
        _actionText = "Please wait...";
        ArgumentNullException.ThrowIfNull(_item);

        if (Id is null)
        {
            
            _item.Images = _filesBase64;
            _item.ProofOfSale = _proofOfSale;
            if (RequiresProof(_item.CategoryId) && _item.ProofOfSale == null)
            {
                _error = "This item requires a proof of purchase";
            }

            else
            {
                var createdItemAsResponse = await ItemsClient.AddItemAsync(_item);
                
                if (!string.IsNullOrWhiteSpace(UserContact))
                {
                    NavigationManager.NavigateTo($@"https://wa.me/{UserContact}?text=Hello%20I%20think%20have%20an%20item%20that%20may%20interest%20you%20Below%20is%20the%20link%20%F0%9F%91%87%20https%3A%2F%2Flocalhost%3A7186%2Fitems%2F{createdItemAsResponse}
", true);
                }
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            await ItemsClient.UpdateItemAsync(Id.Value, _item);
            NavigationManager.NavigateTo("/listings");
        }

    }

    private async Task OnChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            @* var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); *@
            var buffer = new byte[file.Size];
            using (var stream  = file.OpenReadStream())
            {
                await stream.ReadAsync(buffer);
            }

            _filesBase64.Add(new ImageFile 
            {
                Base64Data = Convert.ToBase64String(buffer),
                ContentType = file.ContentType,
                FileName = file.Name
            });
        }

    }

    private async Task OnChangeSingle(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        using (var stream = file.OpenReadStream())
        {
            await stream.ReadAsync(buffer);
        }

        _proofOfSale = new ImageFile
        {
            Base64Data = Convert.ToBase64String(buffer),
            ContentType = file.ContentType,
            FileName = file.Name
        };

        _error = string.Empty;
    }

    private bool RequiresProof(int categoryId)
    {
        if (categoryId == 2 || categoryId == 3)
            return true;

        return false;
    }

    private void ShowSpinner(){
        _spinner?.Show();
    }

}
