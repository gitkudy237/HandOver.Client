@page "/additem"
@page "/edit/{id:int}"

@inject UsersClient UsersClient
@inject ItemsConditionsClient ItemsConditionsClient
@inject CategoriesClient CategoriesClient
@inject ItemsClient ItemsClient
@inject NavigationManager NavigationManager

<PageTitle>@_heading</PageTitle>

<div class="main-content">
    <h2>@_heading</h2>
    @if (_categories is null 
        || _conditions is null
        || _item is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <EditForm class="form" Model="@_item" FormName="addItem" OnValidSubmit="HandleSubmitAsync">
            <DataAnnotationsValidator />
            <h3>@_title</h3>
            <div>
                <label for="name">Item name:*</label>
                <InputText class="input" type="text" id="name" placeholder="Enter item name..." @bind-Value="_item.Name" />
                <ValidationMessage For="() => _item.Name" />
            </div>
            @* This is momentary *@
            <div>
                <label for="image">Image url:*</label>
                <InputText class="input" type="text" id="image" placeholder="Enter Image url..."
                    @bind-Value="_item.ImageUrl" />
                <ValidationMessage For="() => _item.ImageUrl" />
            </div>
            <div>
                <label for="location">Location:*</label>
                <InputText class="input" type="text" id="location" placeholder="Enter location..."
                    @bind-Value="_item.Location" />
                <ValidationMessage For="() => _item.Location" />
            </div>
            <div>
                <label for="category">Category:*</label>
                <InputSelect type="text" id="category" @bind-Value="_item.CategoryId">
                    <option value="">Select category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _item.CategoryId" />
            </div>
            <div style="margin-bottom: 15px;">
                <label for="">Item condition:*</label>
                <div class="radio-container">
                    <InputRadioGroup @bind-Value=_item.ItemConditionId>
                        @foreach (var condition in _conditions)
                        {
                            <InputRadio Value="@condition.Id" id="@condition.Id" />
                            <label for="@condition.Id">@condition.Condition</label>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="() => _item.ItemConditionId" />
                </div>
            </div>
            <div>
                <label for="price">Price:*</label>
                <InputNumber class="input" id="price" @bind-Value="_item.Price" />
                <ValidationMessage For="() => _item.Price" />
            </div>
            
            <div>
                <label for="description">Description:</label>
                <InputTextArea class="input" id="description" @bind-Value="_item.Description" />
            </div>

            <input class="btn btn--block btn--primary" type="submit" value="@_actionText" />
        </EditForm>
    }
</div>



@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private CreateItem? _item { get; set; }

    private ItemDetails? _itemInDb;
    private Category[]? _categories;
    private ItemCondition[]? _conditions;
    private string _title = "Add New Item";
    private string _heading = "Add new";
    private string _actionText = "Submit";

    protected async override Task OnParametersSetAsync()
    {
        if (_item is not null)
        {
            return;
        }

        if (Id is not null)
        {
            _itemInDb = await ItemsClient.GetItemAsync(Id.Value);
            ArgumentNullException.ThrowIfNull(_itemInDb);

            _item = new();

            _item.Name = _itemInDb.Name;
            _item.CategoryId = _itemInDb.CategoryId;
            _item.ItemConditionId = _itemInDb.ItemConditionId;
            _item.Location = _itemInDb.Location;
            _item.Description = _itemInDb.Description;
            _item.Price = _itemInDb.Price;
            _item.ImageUrl = _itemInDb.ImageUrl;

            _title = $"Edit {_item.Name}";
            _actionText = "Confirm";
        }

        else
        {
            _item = new();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        _categories = await CategoriesClient.GetCategoriesAsync();
        _conditions = await ItemsConditionsClient.GetItemsConditionsAsync();
    }

    public async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(_item);

        if (Id is null)
        {
            await ItemsClient.AddItemAsync(_item);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await ItemsClient.UpdateItemAsync(Id.Value, _item);
            NavigationManager.NavigateTo("/listings");
        }

    }
}
