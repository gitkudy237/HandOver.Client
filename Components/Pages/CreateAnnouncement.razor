@page "/CreateAnnouncement"

@inject CategoriesClient CategoriesClient

<PageTitle>Announcement | New</PageTitle>

<div class="main-content">
    @if (_categories is null)
    {
        <p>Loading...</p>
    }
    else{
        <EditForm class="form" Model="@_announcement" FormName="announcement" OnValidSubmit="HandleSubmitAsync">
            <DataAnnotationsValidator />
            <h3>@_title</h3>
            <div>
                <label for="name">Item name:*</label>
                <InputText class="input" type="text" id="name" placeholder="Enter item name..." 
                @bind-Value="_announcement.Name" />
                <ValidationMessage For="() => _announcement.Name" />
            </div>
            <div>
                <label for="category">Category(optional):</label>
                <InputSelect type="text" id="category" @bind-Value="_announcement.CategoryId">
                    <option value="">Select category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>
            <div>
                <label for="name">location:*</label>
                <InputText class="input" type="text" id="location" placeholder="Enter location..." 
                @bind-Value="_announcement.Name" />
                <ValidationMessage For="() => _announcement.Location" />
            </div>
            <div>
                <div class="input-container-2">
                    <div>
                        <label for="min-price">Minimum price:*</label>
                        <InputNumber class="input" id="min-price" @bind-Value="_announcement.MinPrice" aria-placeholder="Minimum"/>
                        <ValidationMessage For="() => _announcement.MinPrice" />
                    </div>
                    <div>
                        <label for="max-price">Maximum price:*</label>
                        <InputNumber class="input" id="max-price" @bind-Value="_announcement.MaxPrice" placeholder="Maximum"/>
                        <ValidationMessage For="() => _announcement.MaxPrice" />
                    </div>
                </div>
            </div>
            <div>
                <label for="name">Contact (Whatsapp):*</label>
                <InputText class="input" type="text" id="contact" placeholder="Enter your Contact..." 
                @bind-Value="_announcement.UserContact" />
                <ValidationMessage For="() => _announcement.UserContact" />
            </div>
            <div>
                <label for="">Upload images(optional):</label>
                <InputFile OnChange="OnChangeSingle" multiple accept="image/jpeg, image/png, image/gif" id="inputFile"
                @bind-Value="@_announcement.Image" />
            </div>
            <div>
                <label for="description">Description:</label>
                <InputTextArea class="input" id="description" @bind-Value="_announcement.Description" />
            </div>
            <input class="btn btn--block btn--primary" type="submit" value="Submit" />
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromForm]
    private CreateItemRequest? _announcement {get; set;} = new();
    private Category[]? _categories;
    private string _title = "Tell us what you want!";
    private ImageFile? _imageFile;
    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoriesClient.GetCategoriesAsync();
    }

    private async Task OnChangeSingle(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        using (var stream = file.OpenReadStream())
        {
            await stream.ReadAsync(buffer);
        }

        _imageFile = new ImageFile
        {
            Base64Data = Convert.ToBase64String(buffer),
            ContentType = file.ContentType,
            FileName = file.Name
        };

    }
    private async Task HandleSubmitAsync(EditContext args)
    {
        @* throw new NotImplementedException(); *@
    }
}
