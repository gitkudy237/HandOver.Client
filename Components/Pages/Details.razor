@page "/items/{id:int}"

@inject UsersClient UsersClient
@inject ItemsConditionsClient ItemsConditionsClient
@inject CategoriesClient CategoriesClient
@inject ItemsClient ItemsClient
@inject ImagesClient ImagesClient
@inject NavigationManager NavigationManager


<PageTitle>Item | Details</PageTitle>

@if (_item is null)
{
  <p>Loading...</p>
}
else
{
  <div class="main-content">
    <div class="details-container grid">
      <section class="carousel-container">
        <ImageCarousel Images="@_images" />
      </section>
      <section class="info-section">
        <div class="section summary-section">
          <h2 id="item-name">@_item.Name</h2>
          <p id="item-price">@_item.Price.ToString("N0") FCFA</p>
          <div id="shipment">
            <p>
              <span class="icon-group icon-group--white"><i class="fa-solid fa-door-open"></i></span>
              <span>Collect at door step</span>
            </p>
          </div>
        </div>
        <div class="section quick-action-section">
          <button class="btn btn--icon btn--primary">
            <i class="fa-regular fa-message"></i>
            <span>Contact Seller</span>
          </button>
          <button class="btn btn--icon btn--outlined">
            <i class="fa-regular fa-bookmark"></i>
            <span>Save</span>
          </button>
        </div>
        @if (string.IsNullOrWhiteSpace(_item.Description))
        {

        }
        else
        {
          <div class="section description-section">
            <h3 class="section-heading">Description</h3>
            <p id="item-description">@_item.Description</p>
          </div>
        }
        <div class="section details-section">
          <h3 class="section-heading">Details</h3>
          @if (_category is null || _condition is null)
          {
            // spiner or loading skeleton
            <p>Loading...</p>
          }
          else
          {
            <p id="item-category">
              <span class="icon-group icon-group--white"><i class="fa-solid fa-car-rear"></i></span>
              <span>@_category.Name</span>
            </p>
            <p id="item-condition">
              <span class="icon-group icon-group--white"><i class="fa-solid fa-stethoscope"></i></span>
              <span>@_condition.Condition</span>
            </p>
            <p id="item-location">
              <span class="icon-group icon-group--white"><i class="fa-solid fa-location-dot"></i></span><span>@_item.Location</span>
            </p>
            <p id="item-post-date">
              <span class="icon-group icon-group--white"><i class="fa-solid fa-calendar-days"></i></span>
              <span>@_item.PostedOn.ToShortDateString()</span>
            </p>
          }
          
        </div>
        <div class="section seller-section">
          <h3 class="section-heading">Seller's information</h3>
          @if (_seller is null)
          {
            // spinner or load skeleton
            <p>Loading...</p>
          }
          else
          {
            <div id="seller-profile">
              <i class="icon--large fa-solid fa-circle-user"></i>
              <p id="seller-name">@_seller.UserName</p>
            </div>
          }
        </div>
      </section>
    </div>
  </div>
}


@code {
  [Parameter]
  public int? Id {get; set;}

  private ItemDetails? _item;
  private ItemCondition? _condition;
  private Category? _category;
  private User? _seller = new() {Id = 1, UserName = "Kudy"};
  private List<string> _images = new();

  protected async override Task OnParametersSetAsync()
  {
    if (Id is not null)
    {
      _item = await ItemsClient.GetItemAsync(Id.Value);

      _category = await CategoriesClient.GetCategoryAsync(_item!.CategoryId);
      _condition = await ItemsConditionsClient.GetItemConditionAsync(_item.ItemConditionId);
      _images = [.. await ImagesClient.GetAllItemImagesAsync(Id.Value)];

    }
  }

}
