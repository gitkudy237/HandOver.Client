@rendermode InteractiveAuto

@inject ItemsClient ItemsClient
@inject NavigationManager NavigationManager
<style>
    
    .modal {
    position: fixed;
    z-index: 1050;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
    position: relative;
    top: 100px;
    display: flex;
    flex-direction: column;
    width: 25rem;
    background: #fff;
    pointer-events: auto;
    border-radius: 0.3rem;
    margin: auto;
    }

    .modal-header,
    .modal-footer {
    display: flex;
    align-items: center;
    padding: 0.5rem;
    }

    .modal-header {
        justify-content: space-between;
        border-bottom: 1px solid #e9ecef;

    }

    .modal-footer {
        padding-bottom: 1rem;
        justify-content: flex-end;
        gap: 20px;
    }

    .modal-body {
    padding: 1rem;
    }

    .close {
    padding: 0.75rem 1.25rem;
    background: none;
    }

    .modal-title {
    margin: 0;
    line-height: 1.5;
    }

</style>

@if (IsVisible)
{
    <div id="" class="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Delete item</h3>
                    <button type="button" class="close" data-bs-dismiss="modal">
                        <i class="icon icon--medium icon--error fa-solid fa-xmark"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Do you want to delete <span style="font-weight: bold;"></span>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn--outlined" @onclick="OnCancel">Cancel</button>
                    <button type="button" class="btn btn--icon btn--error" @onclick="OnConfirm" >
                        <i class="fa-regular fa-trash-can"></i>
                        <span>Delete</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

}


@code {
    [Parameter]
    public EventCallback<bool> ConfirmationResult { get; set; }

    private bool IsVisible { get; set; }

    public void Show(int id)
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private async Task OnConfirm()
    {
        await ConfirmationResult.InvokeAsync(true);
        Hide();
    }

    private async Task OnCancel()
    {
        await ConfirmationResult.InvokeAsync(false);
        Hide();
    }
}
