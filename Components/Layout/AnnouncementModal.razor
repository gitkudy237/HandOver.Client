@rendermode InteractiveServer

@inject AnnouncementsClient AnnouncementsClient
<style>
    .modal {
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: scroll;
        background-color: rgba(0, 0, 0, 0.5);
        @* display: flex;
        justify-content: center;
        align-items: center; *@
    }

    .modal-content {
        display: flex;
        flex-direction: column;
        width: 95%;
        
        max-width: 25rem;
        background: #fff;
        pointer-events: auto;
        border-radius: 0.3rem;
        margin: auto;
    }

    .modal-header,
    .modal-footer {
        display: flex;
        align-items: center;
        padding: 0.5rem;
    }

    .modal-header {
        justify-content: space-between;
        border-bottom: 1px solid #e9ecef;

    }

    .modal-footer {
        padding-bottom: 1rem;
        
    }

     .close {
        padding: 0.3rem ;
        background: none;
    }

    .modal-title {
        margin: 0;
        line-height: 1.5;
    }

    .modal-body-content {
        padding: 1.5rem;
        padding-bottom: .5rem;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        flex-wrap: wrap;
        row-gap: 10px;

        & h3{
            margin-bottom: 2px;
        }
    }

    .image-container {
        height: 300px;
        display: flex;
        justify-content: center;
        align-items: center;
        @* border: 1.5px solid #d6d1d1; *@
        border-radius: 5px;
        background: var(--color-background-green);

        & img{
            width: 80%;
            height: 80%;
            object-fit: cover;
        }
    }


</style>

@if (_isVisible)
{
    if (_announcement is not null)
    {
        <div class="modal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@_announcement.Name</h3>
                        <button type="button" class="close" data-bs-dismiss="modal" @onclick="Hide">
                                <i class="icon icon--medium icon--error fa-solid fa-xmark"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="image-container">
                            <img src="@(_announcement.ImageUrl ?? "Images/default.svg")" alt="@_announcement.Name">
                        </div>
                        <div class="modal-body-content">
                            <div class="price-section">
                                <h3>Price range</h3>
                                <p class="price-range">@_announcement.MinPrice.ToString("N0") - @_announcement.MaxPrice.ToString("N0") FCFA</p>
                            </div>
                            <div class="location-section">
                                <h3>Location</h3>
                                <p>@_announcement.Location</p>
                            </div>
                            <div class="description-section">
                                <h3>Description</h3>
                                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Vero magnam assumenda quam, non accusantium voluptas!</p>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                            <a href="/additem/237@_announcement.UserContact" class="btn btn--block btn--icon btn--primary">
                                    <i class="fa-solid fa-plus"></i>
                                    <span>Propose an item</span>
                            </a>
                        </div>
                </div>
            </div>
        </div>
    }

}

@code {
    
    [Parameter]
    public int? Id {get; set;}
    
    private AnnouncementSummary? _announcement;
    private bool _isVisible  = true;

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            _announcement = await AnnouncementsClient.GetAnnouncementByIdAsync(Id.Value);
        }
    }

    public void Show()
    {
        _isVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        _isVisible = false;
        StateHasChanged();
    }
}
